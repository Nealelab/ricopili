#!/usr/bin/perl

use strict;
use warnings;

my $version = "1.0.0";
my $progname = $0;
$progname =~ s!^.*/!!;


use Getopt::Long;
GetOptions( 
    "help"=> \my $help,
    "user=s"=> \my $username,
    );

use File::Basename;

if ($help){
    print "usage: $progname

version: $version

      options:

        --user STRING   USERNAME if different to \$USER
        --help          print this message then quit


 created by Stephan Ripke 2017 at MGH, Boston, MA
 in the frame of the PGC
\n";
    exit 2;
}



##########################################
# subroutine to split a plink-output-line with references
##########################################

sub split_line_ref {
    my ($line)=${$_[0]};
    chomp($line);
    $line =~ s/^[\s]+//g;
    my @cols=  split /\s+/, $line;
    \@cols;
}


sub time2sec {
    my ($time) = @_;
#    print $time."\n";
    my $D = 0;
    my $H = 0;
    my $M = 0;
    my $S = 0;
    my @cs = split ":", $time;
    if (@cs == 3) {
	$H = $cs[0];
	$M = $cs[1];
	$S = $cs[2];
    }
    elsif (@cs == 4) {
	$D = $cs[0];
	$H = $cs[1];
	$M = $cs[2];
	$S = $cs[3];
    }
    else {
	print "wrong time format\n";
	exit;
    }
#    ($H,$M,$S) = $time =~ m{^([0-9]{2}):([0-9]{2}):([0-9]{2})\z}
#    or ($D,$H,$M,$S) = $time =~ m{^([0-9]{2}):([0-9]{2}):([0-9]{2}):([0-9]{2})\z}
#    or die;

    $H = $H + $D * 24;
    my $nmins = $H*60 + $M;
    my $nsecs = $nmins*60 + $S;
    
    return $nsecs;

}



##############################################
## compare times
######################################


my $user = "\$USER";
if ($username) {
    $user = $username;
}

my @qstat_out = `qstat -u $user`;
my %running_jobs;

foreach my $qstat_row (@qstat_out) {
    my @cells = @{&split_line_ref(\$qstat_row)};
    if (@cells > 4) {
	if ($cells[4] eq "r"){
#	    print "@cells\n";
	    $running_jobs{$cells[0]} = 1;
	}
    }
}


my @qdel_cmds;
my @qdel_cmds_inter;
print "\n----------------------\n";

foreach my $jid (keys %running_jobs) {
    print "looking for job $jid\n";
    print "----------------------\n";
    my @qstat_detout = `qstat -j $jid`;
    my $count_dead = 0;
#    my $qdel_cmd = "qdel $jid -t ";
    my $qdel_cmd = "";
    my $inter = 0;
    foreach my $qstat_detrow (@qstat_detout) {
	my @cells = @{&split_line_ref(\$qstat_detrow)};
	if ($cells[0] eq "usage"){
	    print "@cells\n";
	    my $cputime = $cells[3];
	    $cputime =~ s/cpu=//;
	    $cputime =~ s/,$//;
	    my $walltime = $cells[2];
	    $walltime =~ s/wallclock=//;
	    $walltime =~ s/,$//;
	    my $array_id = $cells[1];
	    $array_id =~ s/:$//;
	    my $cpusec = &time2sec($cputime);
	    my $wallsec = &time2sec($walltime);
	    if ($cpusec < 60 && $wallsec > 300) {
		#		print "cputime=$cputime\n";
		#		print "walltime=$walltime\n";
		print "-----------------------------------------\n";
		$count_dead++;
#		$qdel_cmd .= "$array_id,";
		$qdel_cmd .= "qdel $jid -t $array_id\n";
	    }
	}
	if ($cells[0] eq "submit_cmd:"){
	    print "@cells\n";
	    $inter = 1 if ($qstat_detrow =~ m/-q interactive/);
	    
	}
    }
    if ($count_dead == 0) {
	print "----------------------------------------------\n";
	print "all jobs of $jid seem to be working fine\n";
	print "----------------------------------------------\n";
    }
    else {
	$qdel_cmd =~ s/,$//;
	if ($inter ==1) {
	    push @qdel_cmds_inter, "$qdel_cmd";
	}
	else {
	    push @qdel_cmds, "$qdel_cmd";
	}

    }

}
print "\n---------------------------------\n";
if (@qdel_cmds > 0) {
    print @qdel_cmds." suspicious non-interactive jobs detected, command to delete it:\n";
    foreach my $qdel_cmd (@qdel_cmds) {
	print "$qdel_cmd\n";
    }
}
else {
    print "no suspicious non-interactive jobs detected\n";
}
print "\n---------------------------------\n";
if (@qdel_cmds_inter > 0) {
    print @qdel_cmds_inter." suspicious interactive jobs detected, command to delete it:\n";
    foreach my $qdel_cmd (@qdel_cmds_inter) {
	print "$qdel_cmd\n";
    }
}
else {
    print "no suspicious interactive jobs detected\n";
}
print "---------------------------------\n";
exit;




